
version = '1.4.0'

buildscript {
	ext {
		springBootVersion = '2.2.0.RELEASE'
	}
	repositories {
		mavenCentral()
		maven {
			url 'https://plugins.gradle.org/m2/'
		}
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("gradle.plugin.org.flywaydb:gradle-plugin-publishing:6.0.8")
		classpath("org.yaml:snakeyaml:1.25")
	}
}

subprojects {
	apply plugin: 'java'
	apply plugin: 'java-library'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'org.flywaydb.flyway'
	apply plugin: 'eclipse'
	group = 'fondue'
	sourceCompatibility = 1.8
	repositories {
		mavenCentral()
	}
	dependencies {
	}
	dependencyManagement {
		imports {
			mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
		}
	}

	flyway {
		// parameters in case of using directly Flyway tasks
		url = "jdbc:h2:file:~/.fondue/db/h2;AUTO_SERVER=TRUE"
		user = "sa"
		password = "sa"
	}

	task showHelp(type:JavaExec) {
		group = 'Fondue'
		description = 'Shows (this) help.'
		main = 'fondue.cmd.HelpCommand'
		classpath = configurations.runtime
	}

	task initApp(type:JavaExec) {
		group = 'Fondue'
		description = 'Initializes App for Spring and Fondue.'
		main = 'fondue.cmd.InitAppCommand'
		classpath = configurations.runtime
		args += project.name
		systemProperty 'fondue.rootPkg', System.getProperty('fondue.rootPkg')
	}

	task dbInfo(type: org.flywaydb.gradle.task.FlywayInfoTask) {
		group = 'Fondue'
		description = 'Shows DB info for Fondue App (flywayInfo).'
		doFirst {
			def appConfig = new org.yaml.snakeyaml.Yaml().load( file(new File(project.layout.projectDirectory.getAsFile(), 'src/main/resources/application.yml')).newInputStream() )
			url = "${appConfig.spring.datasource.url}"
			user = "${appConfig.spring.datasource.username}"
			password = "${appConfig.spring.datasource.password}"
		}
	}

	task dbMigrate(type: org.flywaydb.gradle.task.FlywayMigrateTask) {
		group = 'Fondue'
		description = 'Migrates DB for Fondue App (flywayMigrate).'
		doFirst {
			def appConfig = new org.yaml.snakeyaml.Yaml().load( file(new File(project.layout.projectDirectory.getAsFile(), 'src/main/resources/application.yml')).newInputStream() )
			url = "${appConfig.spring.datasource.url}"
			user = "${appConfig.spring.datasource.username}"
			password = "${appConfig.spring.datasource.password}"
		}
	}

	task dbRepair(type: org.flywaydb.gradle.task.FlywayRepairTask) {
		group = 'Fondue'
		description = 'Repairs DB for Fondue App (flywayRepair).'
		doFirst {
			def appConfig = new org.yaml.snakeyaml.Yaml().load( file(new File(project.layout.projectDirectory.getAsFile(), 'src/main/resources/application.yml')).newInputStream() )
			url = "${appConfig.spring.datasource.url}"
			user = "${appConfig.spring.datasource.username}"
			password = "${appConfig.spring.datasource.password}"
		}
	}

	task genModel(type:JavaExec) {
		group = 'Fondue'
		description = 'Generates models for MyBatis.'
		main = 'org.mybatis.generator.api.ShellRunner'
		classpath = configurations.runtime
		doFirst {
			println 'fondue genModel: Generating Model files by MyBatis Generator ...'
			args += ['-configfile', 'config/MyBatisGeneratorConfig.xml']
			def genConfig = new org.yaml.snakeyaml.Yaml().load( file(new File(project.layout.projectDirectory.getAsFile(), 'config/fondue-gen.yml')).newInputStream() )
			if (genConfig.preparationMode == 'OVERWRITE') {
				args += '-overwrite'
			}
			else {
				println ''
				println ' *** Warning *** preparationMode "' + genConfig.preparationMode + '" is not supported on genModel'
				println ''
			}
		}
		doLast {
			println 'fondue genModel: Finished.'
		}
	}

	task genCrud(type:JavaExec) {
		group = 'Fondue'
		description = 'Generates CRUDs for Spring and Fondue.'
		main = 'fondue.cmd.GenCrudCommand'
		classpath = configurations.runtime
		classpath += files('src/main/resources/logback.xml')
	}

	genCrud.mustRunAfter genModel

	task genAll(dependsOn: ['genModel', 'genCrud']) {
		group = 'Fondue'
		description = 'Runs genModel and genCrud.'
	}
}

project(':fondue-framework') {
	dependencies {
		// for Spring
		api 'org.springframework.boot:spring-boot-starter-web'
		testImplementation 'org.springframework.boot:spring-boot-starter-test'
		// for MyBatis
		implementation 'org.mybatis.generator:mybatis-generator-core:1.3.6'
		// for Fondue
		implementation 'org.apache.velocity:velocity-engine-core:2.0'
		implementation 'org.yaml:snakeyaml:1.25'
		implementation 'net.argius:minestra:1.2.0'
	}
}

project(':fondue-app-base') {
	dependencies {
		// for Spring
		api 'org.springframework.boot:spring-boot-starter-thymeleaf'
		api 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:2.4.1'
		// api 'org.springframework.boot:spring-boot-starter-security'
		// api 'org.springframework.boot:spring-boot-starter-cache'
		// api 'org.springframework.boot:spring-boot-starter-jdbc'
		// api 'org.springframework.boot:spring-boot-starter-jersey'
		// api 'org.springframework.boot:spring-boot-starter-mail'
		// api 'org.springframework.session:spring-session'

		// for MyBatis
		api 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.1.1'
		// for Fondue
		api project(':fondue-framework')
		api 'org.apache.commons:commons-lang3:3.9'
		api 'com.h2database:h2:1.4.199'
	}
}

// compile in app's dependencies is intentionally used

project(':examples:fondue-app1') {
	apply plugin: 'org.springframework.boot'
	dependencies {
		compile project(':fondue-app-base')
		testImplementation 'org.springframework.boot:spring-boot-starter-test'
	}
}
